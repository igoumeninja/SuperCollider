{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf290
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red191\green0\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 \
\
(\
\cf3 PatternController\cf2 (\
	(\
		melody: \cf3 PatternProxy\cf2 (\cf3 Pseq\cf2 ((0..10), \cf3 inf\cf2 )),\
		freqSpec: \cf3 ControlSpec\cf2 (400, 800, \cf4 \\exp\cf2 , 0, 500),\
		rhythm: \cf3 PatternProxy\cf2 (\cf3 Pseq\cf2 ([1, 0.5, 0.25, 0.25], \cf3 inf\cf2 )),\
		tempo: \cf3 TempoClock\cf2 .new\
	),\
	\{\
		\cf3 Pbind\cf2 (\cf4 \\degree\cf2 , ~melody, \cf4 \\dur\cf2 , ~rhythm).play(~tempo);\
	\},\
	[13, 0, \cf4 \\toggle\cf2 ],\
	[15, 0, \{ \cf3 | value, pattern |\cf2 \
		~freq.source = ~freqSpec.map(value / 127)\
	\}],\
	[13, 1, \{ ~tempo.tempo = 2 \}, \{ ~tempo.tempo = 0.5 \}]\
);\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf5 // ========= \cf2 \
\
\cf5 /* Synchronizing several TempoClock, where each TempoClock may be running on a different computer. \
Use OSC for the synchronization. \
The simplest way is to broadcast one global beat pattern per osc, and to let each user generate their TempoClocks or other events as they like, in relation to the beats received. \
\
Following is a simulation run locally on the localhost SuperCollider client. \
\
*/\cf2 \
\
\
\cf5 /* We broadcast the osc-beat with the osc message '/beat': */\cf2 \
\
\
~tempoClock = \cf6 TempoClock\cf0 (1);\cf2 \
\
(\
~syncBroadcast = \{\
	\cf3 var\cf2  count = 0;\
	loop \{\
		\cf3 NetAddr\cf2 .localAddr.sendMsg(\cf4 '/beat'\cf2 , count, \cf0 \
			~tempoClock.tempo, ~tempoClock.beatsPerBar,\
			~tempoClock.baseBarBeat, ~tempoClock.baseBar\cf2 );\
		count = count + 1;\
		1.wait;\
	\}\
\
\}.fork(\cf6 ~tempoClock\cf2 );\
)\
\
~users = List.new;\
\
(\
~synchReceive = OSCresponder(nil, '/beat', \{ | time, resp, msg |\
	~users do: _.(time, *msg[1..])\
\});\
)\
\
~synchReceive.add;\
\
~users add: \{ | time, beat, tempo | \
	format("this is user one, time: %, beat number: %, tempo: %", time, beat, tempo).postln;\
\}\
10\
~tempoClock.tempo = 0.2; \
\
\
\
\
\
\cf5 // ========= \cf2 \
\
\cf5 /* Using one TempoClock shared by many Patterns \
...\
*/\cf2 \
\
\
}